#!/bin/bash
set -e
set -x

# install script

source ./install_0_setup

# installation instructions provided by: http://tessera.io/docs-install-cluster/install-ubuntu.html#installation

# Perform in install dir
# mkdir z_install
# cd z_install


# Installation
# Some packages need only be installed on the Hadoop nodes, some need only be installed on the frontend server, and some must be installed on both. This is specified on a per-package basis below. This guide is command line friendly.


# System Update (all servers)
# First update all currently installed system packages.
sudo apt-get update
sudo apt-get upgrade -y


# pkg-config (all servers)
# (http://www.freedesktop.org/wiki/Software/pkg-config/)
# Following the system update, pkg-config is installed.
sudo apt-get install -y pkg-config


# Java (all servers)
# (http://www.java.com/en/)
# A Java repository for Sun/Oracle Java is first added to the Ubuntu APT package management system.
sudo apt-get install -y python-software-properties
sudo add-apt-repository -y ppa:webupd8team/java
# The system repository store is updated and Java is installed.
sudo apt-get update

# auto accept the license
echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections
sudo apt-get install -y oracle-java7-installer


# Protocol Buffers (all servers)
# (https://code.google.com/p/protobuf/)
# Install Protocol Buffers version 2.5.0. It is important that version 2.5.0 be installed and not a newer or older version. Ubuntu 14.04 should have version 2.5.0 available by default. Confirm this first by installing the aptitude package manager and ensuring it is version 2.5.0:

sudo apt-get install -y aptitude
aptitude show protobuf-compiler | grep Version

# If it says it is version 2.5.0-something, then proceed to install it via:
sudo apt-get install -y protobuf-compiler protobuf-c-compiler libprotobuf-dev

######
# Monash servers have a valid protobuf version.  The steps below were commented out
######
# # If it does NOT say it is version 2.5.0-something, then manually install it. First cd to a directory the software can be downloaded and built, and type the following:
#   # Only install manually if the steps above did not say version 2.5.0-something
#   sudo apt-get install libtool
#   wget https://github.com/google/protobuf/archive/v2.5.0.zip
#   unzip v2.5.0.zip
#   cd protobuf-2.5.0
#   ./autogen.sh
#   ./configure --prefix=/usr/local
#   make
#   sudo make install


# Hadoop (all servers)
# (http://www.cloudera.com/content/cloudera/en/products-and-services/cdh.html)
# We use the Hadoop distribution built by Cloudera. It is a Hadoop MRv2 / YARN implementation. Download the Cloudera repository update package and install it. This will add the Cloudera package repository and repository key to the Ubuntu repositories searched when installing packages:
wget http://archive.cloudera.com/cdh5/one-click-install/trusty/amd64/cdh5-repository_1.0_all.deb
sudo dpkg -i cdh5-repository_1.0_all.deb
sudo apt-get update



# !!!!!!!!!!!!!!!!!!!
# We install different packages on each node based on the Hadoop roles taken by that node. Note that when these installs complete you will see warnings such as “Failed to start Hadoop namenode. Return value: 1”. This is because we have not yet completed the configuration of these packages so the initial attempt to launch them will fail.
# !!!!!!!!!!!!!!!!!!!

if [ `hostname` = "$monashFrontend" ]
then
  # frontend.example.com (doesn’t run any hadoop services, but needs the hadoop commands):
  sudo apt-get install -y hadoop-client
elif [ `hostname` = "$monashNamenode" ]
then
  sudo apt-get install -y hadoop-yarn-resourcemanager
  sudo apt-get install -y hadoop-hdfs-namenode
  sudo apt-get install -y hadoop-client

  sudo apt-get install -y hadoop-yarn-nodemanager
  sudo apt-get install -y hadoop-hdfs-datanode
  sudo apt-get install -y hadoop-mapreduce
elif [ `hostname` = "$monashSecondaryNamenode" ]
then
  sudo apt-get install -y hadoop-yarn-nodemanager
  sudo apt-get install -y hadoop-hdfs-secondarynamenode
  sudo apt-get install -y hadoop-hdfs-datanode
  sudo apt-get install -y hadoop-mapreduce
else
  sudo apt-get install -y hadoop-yarn-nodemanager
  sudo apt-get install -y hadoop-hdfs-datanode
  sudo apt-get install -y hadoop-mapreduce
fi


# As part of the above steps, three new users and groups named yarn, hdfs, and mapred will be added to the system. All three users are added to the new group hadoop.

# Configuration of Hadoop settings is done in another section, but for now we will prepare the configuration directory and set it as the default Hadoop configuration on the system. On each of node001 through node005, and on the frontend execute the following. We choose the configuration directory name of “conf.tessera” in this guide:

sudo cp -r /etc/hadoop/conf.empty /etc/hadoop/conf.tessera
sudo update-alternatives --install /etc/hadoop/conf hadoop-conf /etc/hadoop/conf.tessera 50
sudo update-alternatives --set hadoop-conf /etc/hadoop/conf.tessera


# Add Hadoop environment variables and an updated path to the user environment for future logins. This assumes users use an sh/ksh/bash/zsh based login shell.

echo "export HADOOP=/usr/lib/hadoop
export HADOOP_HOME=\$HADOOP
export HADOOP_BIN=\$HADOOP/bin
export HADOOP_LIB=\$HADOOP/lib
export HADOOP_LIBS=\`hadoop classpath | tr -d \\*\`
export HADOOP_CONF_DIR=/etc/hadoop/conf.tessera
export HADOOP_COMMON_HOME=/usr/lib/hadoop
export HADOOP_MAPRED_HOME=/usr/lib/hadoop-mapreduce
export HADOOP_HDFS_HOME=/usr/lib/hadoop-hdfs
export YARN_HOME=/usr/lib/hadoop-yarn
export PATH=\$PATH:\$HADOOP_BIN" |
sudo bash -c "cat > /etc/profile.d/hadoop.sh"



# R (all nodes)
# (http://cran.r-project.org/)
# R is installed and configured to know about Java.

# https://pythonandr.wordpress.com/2015/04/27/upgrading-to-r-3-2-0-on-ubuntu/
codename=$(lsb_release -c -s)
echo "deb https://cran.rstudio.com/bin/linux/ubuntu $codename/" | sudo tee -a /etc/apt/sources.list > /dev/null

sudo apt-get update
sudo apt-get upgrade -y


# Also, the Ubuntu archives on CRAN are signed with the key of Michael Rutter <marutter@gmail> with key ID E084DAB9
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
sudo add-apt-repository -y ppa:marutter/rdev
sudo apt-get update
sudo apt-get upgrade -y

sudo apt-get install -y r-base r-base-dev r-recommended r-cran-rodbc

sudo echo "" >> .bashrc
sudo echo "# Fix java library path for R" >> .bashrc
sudo echo "export LD_LIBRARY_PATH=$JAVA_LD_LIBRARY_PATH" >> .bashrc

sudo R CMD javareconf



# rJava (all nodes)
# (http://www.rforge.net/rJava/)
# rJava is also required by RHIPE. It is installed by:
sudo apt-get install -y r-cran-rjava


# RHIPE (all nodes)
# (http://www.tessera.io/)
# RHIPE is downloaded and installed.
# wget http://ml.stat.purdue.edu/rhipebin/Rhipe_0.75.0_cdh5mr2.tar.gz
wget http://packages.tessera.io/src/contrib/Rhipe_0.75.2.tar.gz
sudo R CMD INSTALL Rhipe_0.75.2.tar.gz


# OpenSSL (all nodes)
# (https://www.openssl.org/)
# OpenSSL package is required by the Github installer/package handler for R.
sudo apt-get install -y libcurl4-openssl-dev


# datadr and trelliscope support packages (all nodes)
# (http://cran.r-project.org/web/packages/available_packages_by_name.html)
# R packages - codetools, latttice, MASS, ggplot2, boot, shiny and devtools are needed for trelliscope and datadr. They are installed using the R internal package installer install.packages. Use the command line to enter the following commands.
cat <<'EOF' > ~/.Rprofile
.First <- function() {

  libLoc <- path.expand("~/R_PKG")
  if (is.na(file.info("~/R_PKG")$isdir) ) {
    dir.create("~/R_PKG")
  }

  # add my home dir to the paths
  .libPaths("~/R_PKG")

  options(
    repos = c(CRAN = "https://cloud.r-project.org/"),
    pkgType = "source",
    browserNLdisabled = TRUE
  )

  invisible(libLoc)
}

if (interactive()) {
  if (require(Rhipe)) {
    rhinit()
    rhoptions(zips = "/user/barret/bin/RhipeLib.tar.gz")
    rhoptions(runner = "sh ./RhipeLib/library/Rhipe/bin/RhipeMapReduce.sh")
  }
}
EOF

sudo apt-get install -y r-cran-codetools r-cran-mass r-cran-ggplot2 r-cran-lattice r-cran-boot
sudo R -e "install.packages(c('RCurl', 'shiny', 'devtools'))"

# datadr and trelliscope (all nodes)
# (http://www.tessera.io)
# datadr and trelliscope are installed using install_github package from R.
sudo R -e "library(devtools); install_github('tesseradata/datadr')"
sudo R -e "library(devtools); install_github('tesseradata/trelliscope')"



if [ `hostname` = "$monashFrontend" ]
then
  # gdebi-core (frontend server)
  # (https://apps.ubuntu.com/cat/applications/precise/gdebi/)
  # gdebi is a deb package installer. It automatically resolves and installs library dependencies.
  sudo apt-get install -y gdebi-core

  # Shiny server (frontend server)
  # (http://www.rstudio.com/products/shiny/shiny-server/)
  # Shiny server is only installed on frontend.example.com, our designated Shiny server.
  # sudo R -e "install.packages('shiny')" # already done above
  wget http://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.3.0.403-amd64.deb
  sudo gdebi --n shiny-server-1.3.0.403-amd64.deb

  # Rstudio Server (frontend server)
  # (http://www.rstudio.com/)
  # Rstudio Server is installed on just the shiny server, frontend.example.com.
  wget http://download2.rstudio.org/rstudio-server-0.98.1103-amd64.deb -O /tmp/rstudio-server.deb
  sudo gdebi --n /tmp/rstudio-server.deb
  rm /tmp/rstudio-server.deb

  # Rstudio Server should now be running on frontend.example.com. Connect to it by browsing to http://frontend.example.com:8787 and logging in as a normal user with accounts on that server. This may require firewall changes.
fi
